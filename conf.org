#+TITLE: conf.org
#+AUTHOR: Tom Hutchings
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

This is my emacs init written in org mode. In order to avoid a ton of problems, this file, =conf.org=, gets tangled and loaded as =conf.el=. =init.el= is an already existing emacs lisp file that initialises the =straight.el= package manager, loads a new version of org-mode, then tangles and loads this file, removing the need for any kind of bootstrapping and allowing the config to be cloned and run out of the box.

* Init GC Settings

We set GC settings to better values for init now, and then reset them to saner values later.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))
#+END_SRC

Also the compiler to keep quiet about free vars and the like, which will inevitably pop up on compilation with all the packages we use.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

* Packages
   We now use a combination of use-package and straight.el to manage packages. This gives a nice functional/declarative style of package management. Way better than trying to remember what is installed on which computer, and having to constantly call =package-install-selected-packages= on every new machine.

   +This is the bootstrap code for straight.el+ Due to org autoloading reasons, we have to put the bootstrap code for straight.el into =init.el=

    I also want to set up =use-package=, which works in conjuntion with =straight.el=.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq use-package-always-defer t)
  (setq straight-use-package-by-default t)

  (defvar personal-keybindings)
#+END_SRC

* Local Files
This section is for local lisp files.

Sometimes you start emacs from a shortcut, and it'll put itself in the wrong directory. This starts us in home.

#+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
#+END_SRC

The =custom-file= must be set so as not to pollute our init.el with =custom-set-definitions=.
In the =/lisp= directory I keep any standalone lisp files, such as major and minor modes I wrote.
=/colors= has any custom color schemes I've picked up that don't exist in melpa.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory  "custom.el"))
  (load custom-file)
  (add-to-list 'load-path (concat user-emacs-directory "lisp/"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "colors/"))
#+END_SRC

* Editor config
  Here we configure the emacs text editor itself, the old fashioned bitch. Lots of this is just disabling menu bars, scroll bars, bells, cursors yada yada yada...

** Theme and Font
First we'll install the theme packages. I'm a fan of light themes for several reasons, both scientific and superstitous. First see [[https://www.quora.com/Is-dark-mode-light-text-on-a-dark-background-really-better-for-the-eyes/answer/Alan-Kay-11][this]] from Alan Kay himself on the topic, as well as many others providing further medical proof that lighter backgrounds are easier on the eyes, unless you live in a hikki nest bedroom. But being human I'm not one to blindly (lol) make decisions based purely on logical reasoning.
The second reason is a more illogical, human one. I find that using a light theme puts my mind in a different state to a dark one, treating my editor and its text as a purer interface, a kind of smart[ish] paper or perhaps an Alto or LMI Lambda, something to be cared for, rather than the spammy, beeping, ugly fonted VGA terminals that a white on black theme reminds me of.

#+BEGIN_SRC emacs-lisp
  (use-package tao-theme)     ;; tao yang
  (use-package gruvbox-theme) ;; gruvbox-light-soft
  (use-package acme-theme
    :straight (:host github :repo "nnoodle/emacs-acme-theme")
    :init
    ;; variables to configure
    (setq acme-theme-gray-rainbow-delimiters nil)
    (setq acme-theme-more-syntax-hl t))

  (use-package parchment-theme
    :init (load-theme 'parchment))
#+END_SRC

Theme picker. I can add themes I like the the list =tk/themes= and choose from them when I want. I realised I changed themes quite a lot, not least in the morning and evening I switch between a light and dark theme.
    
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar tk/themes '(
			    ;; Dark Themes
			    base16-atlas
			    purple-haze
			    soothe

			    ;; Light Themes
			    base16-atelier-estuary-light
			    parchment
			    plan9
			    anti-zenburn))

  (require 'fringe)
  
  (defun tk/pick-theme ()
    "Present a list of themes for user to pick"
    (interactive)
    (ivy-read
     "Pick theme:"
     tk/themes 
     :require-match t
     ;; :initial-input (car custom-enabled-themes)
     :action (lambda (theme)
	       (progn
		 (mapc #'disable-theme custom-enabled-themes)
		 (load-theme (intern theme) t)
		 (fringe-mode 'minimal)))
     :update-fn (lambda ()
		  (progn (mapc #'disable-theme custom-enabled-themes)
			 (load-theme (nth ivy--index tk/themes) t)
			 (fringe-mode 0)))))
#+END_SRC

Setting the font is pretty self explanatory. Iosevka is a nice tall font, has good programming stuff like distinguishing 0 and O, and has ligature support (although emacs is still a lil behind on automatic ligature support.) We'll also include =all-the-icons=, which some packages will use only if it is installed.

#+BEGIN_SRC emacs-lisp
  ;; fonts
  (set-frame-font "Iosevka Slab 13" nil t)
  (straight-use-package 'all-the-icons)
#+END_SRC

This sections a doozy. Welcome to emacs in the 21st century. Basically we just have to disable all the ugly stuff emacs has by default, like menu bars. Who needs 'em; I have M-x, I have keybinds. Visible bell aka /SHUT THE FUCK UP EMACS/, inhibit startup because I know I'm using /"GNU Emacs, one component of the GNU/Linux operating system"/, turn off scroll bars and the weird fringes. Also =doom-modeline= makes the modeline look all nice.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (tool-bar-mode 0)
  (menu-bar-mode 1)
  (when (display-graphic-p)
    (scroll-bar-mode 0)
    (fringe-mode '(1 . 1)))
  (setq frame-title-format "%b")

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))

  ;; better modeline
  ;;(use-package feebleline
  ;;  :init (feebleline-mode 1))
#+END_SRC

** Olivetti
#+BEGIN_SRC emacs-lisp
  ;; This is here to avoid issues with olivetti and use-package I believe. TODO test
  (use-package bind-key
  :ensure t
  :config
  (add-to-list 'same-window-buffer-names "*Personal Keybindings*"))

  (use-package olivetti
    :bind
    (("<left-margin> <mouse-1>" . olivetti-expand)
     ("<right-margin> <mouse-1>" . olivetti-shrink)))
#+END_SRC

** Dashboard
Opening emacs only to be greeted by a blank =*scratch*= isn't fun. How about a cool startup page.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard)
  (require 'dashboard)

  (let ((imgs (file-expand-wildcards (concat user-emacs-directory "/dashboard-images/*.png")))
	(random-choice (lambda (elems)
			 (let* ((size (length elems))
				(index (random size)))
			   (nth index elems)))))
    (setq dashboard-startup-banner (funcall random-choice imgs)))

  (setq dashboard-banner-logo-title "You're slacking off instead of writing Lisp? Pretty cringe bro.")
  (setq dashboard-center-content t)
  (setq show-week-agenda-p t)
  (setq dashboard-items '((recents  . 5)
			  (agenda   . 5)
			  (projects . 5)))
  (setq dashboard-footer nil)

  (dashboard-setup-startup-hook)
  (setq inital-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Tramp

Clearly we'll want to use ssh as default.

#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package 'tramp)
  (setq tramp-default-method "ssh")
#+END_SRC

This lets us connect to locally running docker containers. See [[https://willschenk.com/articles/2020/tramp_tricks/][here]].

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Open files in Docker containers like so: /docker:drunk_bardeen:/etc/passwd
(add-to-list 'tramp-methods
   (cons
    "docker"
    '((tramp-login-program "docker")
      (tramp-login-args (("exec" "-it") ("%h") ("/bin/bash")))
      (tramp-remote-shell "/bin/sh")
      (tramp-remote-shell-args ("-i") ("-c")))))

  (defadvice tramp-completion-handle-file-name-all-completions
    (around dotemacs-completion-docker activate)
    "(tramp-completion-handle-file-name-all-completions \"\" \"/docker:\" returns
      a list of active Docker container names, followed by colons."
    (if (equal (ad-get-arg 1) "/docker:")
        (let* ((dockernames-raw (shell-command-to-string "docker ps | awk '$NF != \"NAMES\" { print $NF \":\" }'"))
               (dockernames (cl-remove-if-not
                             #'(lambda (dockerline) (string-match ":$" dockerline))
                             (split-string dockernames-raw "\n"))))
          (setq ad-return-value dockernames))
      ad-do-it))
#+END_SRC

** Editor functionality

Most of this is pretty self-explanatory. ispell exists actually (thanks macOS for being macOS), smooth scrolling is nice, undo-tree everywhere, oh and please stop spewing backup files all over my file system.

#+BEGIN_SRC emacs-lisp
  ;; flyspell
  (setq ispell-program-name "/usr/local/bin/ispell")

  ;; smooth scroll
  (straight-use-package 'smooth-scrolling)
  (require 'smooth-scrolling)
  (smooth-scrolling-mode 1)

  (straight-use-package 'undo-tree)
  (global-undo-tree-mode)

  ;; stop backups
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil)
#+END_SRC

** Editor key bindings
Most of my more specific key bindings are stored in =modal-soul.el=, a set of hydras which simulate a kind of modal-editing system ala vim. Other stuff here is just avy.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
  (straight-use-package 'avy)
  (straight-use-package 'buffer-move)
  (load "~/.emacs.d/lisp/modal-soul")

  (straight-use-package 'which-key)
  (which-key-mode)
#+END_SRC

Expand region is great.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-." . er/expand-region)))
#+END_SRC

** Command Completion and Search
*** Selectrum (unused)
I use selectrum mode now, it's just way smaller to do the same job as ivy did.

#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package
   '(selectrum :host github :repo "raxod502/selectrum"))
  (selectrum-mode +1)

  (straight-use-package
   '(selectrum-prescient :host github :repo "raxod502/prescient.el"
                         :files ("selectrum-prescient.el")))
  ;; to make sorting and filtering more intelligent
  (selectrum-prescient-mode +1)
  ;; to save your command history on disk, so the sorting gets more
  ;; intelligent over time
  (prescient-persist-mode +1)
#+END_SRC

Additionally, we can use CTRLF mode (alpha) to replace isearch.

#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package
   '(ctrlf :host github :repo "raxod502/ctrlf"))
  (ctrlf-mode +1)
#+END_SRC

*** Counsel (used again)
#+BEGIN_SRC emacs-lisp
  ;; ivy/counsel/swiper
  (use-package counsel
    :bind (("\C-s" . swiper))
    :config
    (setq swiper-use-visual-line-p #'ignore)
    (counsel-mode))

  (straight-use-package 'smex)
#+END_SRC

** waifu-mode
    Ain't this a gem. It's a kind of image viewer, it picks random images from a given folder and shows them onscreen.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'waifu)
  (waifu-keybind-to-dir
   '(("m" "~/Pictures/animu/madoka_magica/madoka")
     ("h" "~/Pictures/animu/madoka_magica/homura")
     ("s" "~/Pictures/animu/madoka_magica/sayaka")
     ("k" "~/Pictures/animu/madoka_magica/kyouko")
     ("M" "~/Pictures/animu/madoka_magica/mami")
     ("v" "~/Pictures/animu/gabriel_dropout/vigne")
     ("f" "~/Pictures/animu/re_zero/felix")
     ("p" "~/Pictures/animu/proggybooks")))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(straight-use-package 'magit)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
#+END_SRC

** Minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'all-the-icons)
  (straight-use-package 'treemacs)
#+END_SRC

** PDF Tools
Better pdf viewing
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'pdf-tools)
#+END_SRC

** Elpher
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'elpher)
#+END_SRC

* Org mode
As I spend so much time and effort on /org mode/ I feel it deserves a whole section and a full explanation. 

** Misc Config
First though, a few org addon packages. org-superstar replaces the default =*= with nice unicode bullets and org-sidebar provides a handy sidebar overview of files.

#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    ;; :demand
    :config
    (org-superstar-configure-like-org-bullets)
    :hook
    (org-mode . org-superstar-mode))

  (straight-use-package 'org-sidebar)
#+END_SRC

Org agenda would annoyingly mess up your windows and then not put them back. Be more like your respectable tidy brother magit.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-restore-windows-after-quit 1)
  (setq org-src-window-setup 'current-window)
#+END_SRC

=hide-emphasis-markers= is a nice addition that shows styled text inline. Combined with variable pitch mode it makes org buffers feel more like rich text.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  ;(add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC

=org-indent-mode= handles indentation, or the lack thereof. Org files should be saved without indentation, and org-indent-mode will display them as if they were. Naturally its important for org-indent-mode to always be enabled, so that the lack of indentation is hidden away.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

=org-fragtog= nicely switches between latex preview and latex code when your cursor is over a snippet.

#+BEGIN_SRC emacs-lisp
  (use-package org-fragtog
    :straight (:host github :repo "io12/org-fragtog")
    :init (add-hook 'org-mode-hook 'org-fragtog-mode))
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

** Table
Org table auto align, from =/u/ndamee= on reddit:
#+BEGIN_SRC emacs-lisp
  (require 'subr-x)

  (setq org-table-auto-align-in-progress nil)

  (defun org-table-auto-align (begin end length)
    (save-match-data
      (unless (or org-table-auto-align-in-progress
                  (not (org-at-table-p))
                  (and (eq this-command 'org-self-insert-command)
                       (member (this-command-keys) '(" " "+" "|" "-"))))
        ;; uses zero-idle timer so the buffer content is settled after
        ;; the change, the cursor is moved, so we know what state we
        ;; have to restore after auto align
        (run-with-idle-timer
         0 nil
         (lambda ()
           (if (looking-back "| *\\([^|]+\\)")
               (let ((pos (string-trim-right (match-string 1))))
                 (setq org-table-auto-align-in-progress t)
                 (unwind-protect
                     (progn
                       (org-table-align)
                       (search-forward pos nil t))
                   (setq org-table-auto-align-in-progress nil)))))))))


  (define-minor-mode org-table-auto-align-mode
    "A mode for aligning Org mode tables automatically as you type."
    :lighter " OrgTblAA"
    (if org-table-auto-align-mode
        (add-hook 'after-change-functions #'org-table-auto-align t t)
      (remove-hook 'after-change-functions #'org-table-auto-align t)))

  ;; (add-hook 'org-mode-hook #'org-table-auto-align-mode)
#+END_SRC

** Workflow
Now we get to the good stuff. Here we'll set some useful variables for all org functions. Org directory where I keep all my org files. 
My system uses time management features like the /agenda/, =org-capture=, some /GTD/ concepts, and a combo of /Orglzy/ and /Syncthing/ to provide a comprehensive, multiplatform, planning system.

#+BEGIN_SRC emacs-lisp
  (setq tk/org-directory "~/doc/org/")
  (setq tk/org-file-list
        `(,@(file-expand-wildcards (concat tk/org-directory "*.org"))))
#+END_SRC

We should modify the /TODO/ keywords to add a 'NEXT' keyword. This means a task is ongoing, and ideally should be finished before others are started.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-todo-keywords 
        '((sequence "TODO" "NEXT" "|" "DONE" )))
#+END_SRC

=inbox.org= serves as a place for captured ideas to go. 

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat tk/org-directory "inbox.org"))
#+END_SRC

Once notes are captured to inbox.org, they must be /processed/. I will add any extra details such as deadlines, time to complete, and priority, then /refile/ them to their relevant org heading. Since all org files can be related in any weird number of ways, we shouldn't limit ourselves to only a small amount of targets. All org files (at least all in the org directory) are included, albeit only to a single heading level (for now).

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets
        (mapcar (lambda (e) `(,e . (:maxlevel . 2)))
                tk/org-file-list))
  (setq org-refile-use-outline-path 'file)
#+END_SRC

Sometimes I wanna use /pomodoro technique/.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-pomodoro)
#+END_SRC
** Agenda 
The same principle applies to /agenda/. We should be able to put /TODO/ headings in any org file, for any project, and have them be added to the agenda. We can filter through these in the agenda config.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files tk/org-file-list)
#+END_SRC

The org agenda page is the heart of the entire system. Assuming all the org files are in place, and the headings are processed correctly, this should be a beautiful dashboard to manage tasks from. Largely copied from [[https://gist.github.com/jethrokuan/78936a44f249e2c1a61b5184669a32d7][this gist]] (look up the rest of Jethro Kuans stuff on this though, he's got it down).

#+BEGIN_SRC emacs-lisp
  (setq tk/org-agenda-view
        `(("a" "Agenda"
           ;; Today
           (;; (agenda ""
            ;;         ((org-agenda-span 'day)
            ;;          (org-agenda-overriding-header "Today")
            ;;          (org-deadline-warning-days 365)))
            ;; The Week
            (agenda ""
                    ((org-agenda-span 'week)
                     (org-agenda-overriding-header "This Week")
                     (org-deadline-warning-days 30)))
            ;; Inbox
            (todo "TODO"
                  ((org-agenda-overriding-header "To Refile")
                   (org-agenda-files `(,(concat tk/org-directory "inbox.org")))))
            ;; In Progress
            (todo "NEXT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-files `(,@(file-expand-wildcards (concat tk/org-directory "*.org"))))))
            ;; One offs (next.org)
            (todo "TODO"
                  ((org-agenda-overriding-header "Tasks")
                   (org-agenda-files `(,(concat tk/org-directory "next.org")))
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            ;; Work
            (tags-todo "work"
                       ((org-agenda-overriding-header "Work Stuff")
                        (org-agenda-files `(,@(file-expand-wildcards (concat tk/org-directory "*.org"))))))
            ;; Personal Stuff
            ;; (tags-todo ":house:money:work:me:watch"
            ;;            ((org-agenda-overriding-header "Me")))
            nil))))

  (setq org-agenda-custom-commands `,tk/org-agenda-view)
  (global-set-key (kbd "C-c a") #'org-agenda)
#+END_SRC

It's also important to handle idle time. I sometimes forget I'm clocked in, or something high priority comes up and I forget to clock out. Setting an idle time variable will tell org to prompt you after n minutes have passed without any input, asking what to do with the time spent doing 'nothing'. ~Of course some tasks aren't doable in emacs,~ glorious macOS will measure any activity on the system. Still doesn't apply for offline tasks. That could be time spent working offline, and you can just tell org to add it to the clock all the same.

#+BEGIN_SRC emacs-lisp
(setq org-clock-idle-timer 15)
#+END_SRC

We'll also do some minor theming to tidy it up.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-block-separator ?-)
#+END_SRC

Capturing is key to the process. Ideas can come about anywhere, anytime. Being able to quickly jot your idea down for later processing means you don't have to worry about sacrificing your current task or your forgetting your idea.
Right now there's only one capture template, /i/, which adds the idea to the inbox file with /TODO/ prefixed.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        `(("i" "inbox" entry (file ,(concat tk/org-directory "inbox.org")) "* TODO %?")
          ("n" "next" entry (file ,(concat tk/org-directory "next.org"))   "* TODO %?")))

  (global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC
** Note Taking
=org-download= is great for taking notes.

#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :custom
    (org-download-screenshot-method "screencapture -i %s"))
#+END_SRC

=org-brain= dropped in favour of =org-roam=
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-brain
    :init
    (setq org-brain-path (concat tk/org-directory "brain/"))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file (concat user-emacs-directory ".org-id-locations"))
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)
    (setq org-brain-include-file-entries nil
          org-brain-file-entries-use-title nil))
#+END_SRC

=org-roam=
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-roam
        :after org
        :hook (org-mode . org-roam-mode)
        :straight (:host github :repo "jethrokuan/org-roam")
        :custom
        (org-roam-directory tk/org-directory)
        :bind
        ("C-c n l" . org-roam)      
        ("C-c n t" . org-roam-today)
        ("C-c n f" . org-roam-find-file)
        ("C-c n i" . org-roam-insert)
        ("C-c n g" . org-roam-show-graph))
#+END_SRC

** Habits
Org has a nice way of tracking em.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'org-modules 'habit)
#+END_SRC

** Blog
Org mode can also be used as a blog creation platform. I can write and keep blog posts locally, and then publish them to a webserver in HTML format.

#+BEGIN_SRC emacs-lisp
  (use-package org-static-blog
    :config
    (setq org-static-blog-publish-title "comf.moe blog")
    (setq org-static-blog-publish-url "https://comf.moe/blog/")
    (setq org-static-blog-enable-tags t)
    (setq org-static-blog-publish-directory "/ssh:tom@comf.moe:/var/www/comf.moe/blog/")
    (setq org-static-blog-posts-directory "~/doc/org/journal/posts/")
    (setq org-static-blog-drafts-directory "~/doc/org/journal/drafts/")
    (setq org-static-blog-enable-tags nil)
    (setq org-export-with-toc nil)
    (setq org-export-with-section-numbers nil)
    ;; (setq org-static-blog-use-preview t)
    )
#+END_SRC

We'll have to set a long and annoying header:

#+BEGIN_SRC emacs-lisp
  (setq org-static-blog-page-header
"<meta charset=\"UTF-8\">
<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon.png\">
<link rel=\"stylesheet\" type=\"text/css\" href=\"/index.css\">
<title>comf: example</title>
<script defer type=\"text/javascript\" src=\"/common.js\"></script>")
#+END_SRC

preamble:

#+BEGIN_SRC emacs-lisp
  (setq org-static-blog-page-preamble
"<div class=\"content-box\" id=\"links\">
  <ul>
    <li><a href=\"/index.html\">home</a></li>
    <li>cute</li>
    <li><a href=\"/blog/archive.html\">blog</a></li>
    <li>about</li>
    <li>homepages:</li>
      <ul>
        <li><a href=\"newtab/homepage1.html\">homepage 1</a></li>
        <li><a href=\"newtab/homepage2.html\">homepage 2</a></li>
        <li><a href=\"newtab/homepage3.html\">homepage 3</a></li>
        <li><a href=\"newtab/homepage4.html\">homepage 4</a></li>
     </ul>
  </ul>
</div>")
#+END_SRC

To get the posts to fit into the template properly.

* Language Config
Finally we've transformed the ancient magicks of emacs from a 50 year old dusty old expensive typewriter into an elegant tool to weave the fabric of code. Or something. Now we can get to our language specific config and hooks. 

** Company Mode
Most of these languages provide a company mode completion system. We'll just make sure the latest version is installed here so we don't have to worry about it somwhere else.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company)
#+END_SRC

** C/C++
The siblings who don't want to be associated with each other, lumped in to the same hook once again. By default emacs formats C in a bizarre GNU way. Cool, but not for me. Or whoever else has to read my C code.

The mode hook is to set up eglot, but since that's proved very difficult in OS dev stuff, and my main C programming is for OS dev, I just disabled it until I can be bothered.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
	c-basic-offset 4)

  (defun tk/c-c++-hook ()
    "Personal C/C++ hook."
    (setq company-backends
	  (cons 'company-capf
		(remove 'company-capf company-backends)))
    (eglot-ensure))

  ;(add-hook 'c-mode-hook 'tk/c-c++-hook)
#+END_SRC

*** Work C++
For work I have to write a different style.

#+BEGIN_SRC emacs-lisp :tangle no
(setq c-default-style "whitesmith"
	    c-basic-offset 8)
#+END_SRC

** Lisps
The language of the gods finally gets its turn. Do I want intelligent context dependent structural editing? *YES*. Do I want rainbows all over my parentheses? *YES*. Gimme that good shit.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'geiser)
  (straight-use-package 'lispy)
  (straight-use-package 'rainbow-delimiters)
  (straight-use-package 'el-fly-indent-mode)

  ;; TODO split this into hook declaration then multiple use-package declarations adding to hook
  (defun tk/lisp-hook ()
    "Personal Lisp hook."
    (electric-pair-mode)
    (lispy-mode)
    (rainbow-delimiters-mode)
    (show-paren-mode)
    (company-mode)
    (el-fly-indent-mode))

  (add-hook 'emacs-lisp-mode-hook  #'tk/lisp-hook)
  (add-hook 'common-lisp-mode-hook #'tk/lisp-hook)
  (add-hook 'scheme-mode-hook      #'tk/lisp-hook)
  (add-hook 'lisp-mode-hook        #'tk/lisp-hook)

  ;; Common Lisp
  (straight-use-package 'slime)
  (straight-use-package 'slime-company)
  (require 'slime)
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (slime-setup '(slime-fancy slime-company))
#+END_SRC

** Latex
This is really just wrestling with macOS. AuCTeX is really good out of the box.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'auctex)
(straight-use-package 'latex-pretty-symbols)
(straight-use-package 'exec-path-from-shell)

(exec-path-from-shell-initialize)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.
#+END_SRC

I guess I write academic stuff. As such we need the ultimate academic tool.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'academic-phrases)
#+END_SRC

** Matlab
Urgh, matlab. At least its not too bad to use from within Emacs. We've gotta tell matlab-mode where the matlab binary is, and then we get to use the shell and eval like features in Emacs.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'matlab-mode)
(setq matlab-shell-command "/Applications/MATLAB_R2019a.app/bin/matlab")
(setq matlab-shell-command-switches (list "-nodesktop"))
#+END_SRC

** C#
We use csharp-mode for general syntax highlighting, and omnisharp for more advanced tooling.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'csharp-mode)
  (straight-use-package 'omnisharp)

  (add-hook 'csharp-mode-hook #'omnisharp-mode)
  ;(omnisharp-install-server)  ;Will do nothing if server already installed

  (eval-after-load
   'company
   '(add-to-list 'company-backends 'company-omnisharp))

  (add-hook 'csharp-mode-hook #'company-mode)
#+END_SRC

** Swift/Xcode
Currently non working, not tangled

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package lsp-sourcekit
    :after lsp-mode
    :config
    (setenv "SOURCEKIT_TOOLCHAIN_PATH" "/Library/Developer/Toolchains/")
    (setq lsp-sourcekit-executable (expand-file-name "/L")))
#+END_SRC

* Regular GC Settings

Now we can put the GC back to normal.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
