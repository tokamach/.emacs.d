#+TITLE: conf.org
#+AUTHOR: Tom Hutchings
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

This is my emacs init written in org mode. In order to avoid a ton of problems, this file, =conf.org=, gets tangled and loaded as =conf.el=. =init.el= is an already existing emacs lisp file that initialises the =straight.el= package manager, loads a new version of org-mode, then tangles and loads this file, removing the need for any kind of bootstrapping and allowing the config to be cloned and run out of the box.

* Work or Home Mode
Since I use emacs at both work and home I'd rather be able to share a single config but configure slightly differently depending on where I am. I set =tk/environment= to allow the config to adapt as needed.

Values:
+ =home=
+ =work=
+ =server=

  TODO: guess this value

#+BEGIN_SRC emacs-lisp
  (setq tk/env 'home)
#+END_SRC

* Local Lisp Files
Sometimes you start emacs from a shortcut, and it'll put itself in the wrong directory. This starts us in home.

#+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
  (when (not (boundp 'user-emacs-directory))
    (setq user-emacs-directory "~/.emacs.d/"))
#+END_SRC

The =custom-file= must be set so as not to pollute our init.el with =custom-set-definitions=.
In the =/lisp= directory I keep any standalone lisp files, such as major and minor modes I wrote.
=/colors= has any custom color schemes I've picked up that don't exist in melpa.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory  "custom.el"))
  (load custom-file)
  (add-to-list 'load-path (concat user-emacs-directory "lisp/"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "colors/"))
#+END_SRC

* Package Manager
   We now use a combination of use-package and straight.el to manage packages. This gives a nice functional/declarative style of package management. Way better than trying to remember what is installed on which computer, and having to constantly call =package-install-selected-packages= on every new machine.

   +This is the bootstrap code for straight.el+ Due to org autoloading reasons, we have to put the bootstrap code for straight.el into =init.el=

    I also want to set up =use-package=, which works in conjuntion with =straight.el=.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq use-package-always-defer t)
  (setq straight-use-package-by-default t)
#+END_SRC

* Editor
  Here we configure the emacs text editor itself, the old fashioned bitch. Lots of this is just disabling menu bars, scroll bars, bells, cursors yada yada yada...
** Appearance
*** Theme
First we'll install the theme packages. I'm a fan of light themes for several reasons, both scientific and superstitous. First see [[https://www.quora.com/Is-dark-mode-light-text-on-a-dark-background-really-better-for-the-eyes/answer/Alan-Kay-11][this]] from Alan Kay himself on the topic, as well as many others providing further medical proof that lighter backgrounds are easier on the eyes, unless you live in a hikki nest bedroom.
But being human I'm not one to blindly (lol) make decisions based on purely logical reasoning, so the the second motive is a more illogical, human one. I find that using a light theme puts my mind in a different state to a dark one, treating my editor and its text as a purer interface, a kind of smart[ish] paper or perhaps an Alto or LMI Lambda, something to be cared for, rather than the spammy, beeping, ugly font VGA terminals that a white on black theme reminds me of.

#+BEGIN_SRC emacs-lisp
  (use-package tao-theme
    :init (load-theme 'tao-yang)
    :config (setq tao-theme-use-sepia t))
#+END_SRC

*** Font
Setting the font is pretty self explanatory. Iosevka is a nice tall font, has good programming stuff like distinguishing 0 and O, and has ligature support (although emacs is still a lil behind on automatic ligature support.) We'll also include =all-the-icons=, which some packages will use only if it is installed.

#+BEGIN_SRC emacs-lisp
  ;; fonts
  (set-frame-font "Iosevka Term Slab 13" nil t)
  (straight-use-package 'all-the-icons)
#+END_SRC

*** UI Simplifying
This sections a doozy. Welcome to emacs in the 21st century. Basically we just have to disable all the ugly stuff emacs has by default, like menu bars. Who needs 'em; I have M-x, I have keybinds. Visible bell aka /SHUT THE FUCK UP EMACS/, inhibit startup because I know I'm using /"GNU Emacs, one component of the GNU/Linux operating system"/, turn off scroll bars and the weird fringes. Also =doom-modeline= makes the modeline look all nice.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
  (setq initial-scratch-message "")
  (tool-bar-mode 0)
  (when (display-graphic-p)
    (scroll-bar-mode 0)
    (fringe-mode '(1 . 1)))
  (setq frame-title-format "emacs: %b")

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))
#+END_SRC

*** Dashboard
Opening emacs only to be greeted by a blank =*scratch*= isn't fun. How about a cool startup page.

#+BEGIN_SRC emacs-lisp
    (use-package dashboard)
    (require 'dashboard)

    (let ((random-choice (lambda (elems)
                           (let* ((size (length elems))
                                  (index (random size)))
                             (nth index elems))))
	        ;; TODO: if (= tk/env 'home) use some other pics too (~/Pictures/animu maybe?)
          (imgs (append (file-expand-wildcards (concat user-emacs-directory "dashboard-images/*.png"))
                        (file-expand-wildcards (concat user-emacs-directory "dashboard-images/*.jpg"))
                        (file-expand-wildcards (concat user-emacs-directory "dashboard-images/*.svg"))))
          (quotes `("You're slacking off instead of writing Lisp? Pretty cringe bro."
                    "What Would McCarthy Do?"
                    "Have you read your SICP today?"
                    "Don't think! Feel!"
                    "THINK!"
                    ,(if (eq tk/env 'home)
                         "Do it for her."
                       "Remember, it's all in your head."))))
      (setq dashboard-startup-banner (funcall random-choice imgs))
      (setq dashboard-banner-logo-title (funcall random-choice quotes)))

  (setq dashboard-image-banner-max-height 400)
  (setq dashboard-image-banner-max-width 400)
  (setq dashboard-center-content t)
  ;;(setq show-week-agenda-p nil)
  (setq dashboard-items '((recents . 5)
                          (projects . 5)))
  (setq dashboard-set-footer nil)

  (dashboard-setup-startup-hook)
  (setq inital-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Editor Functionality
*** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
    ;; smooth scroll
    (straight-use-package 'smooth-scrolling)
    (require 'smooth-scrolling)
    (smooth-scrolling-mode 1)
#+END_SRC

*** Disable Backups

#+BEGIN_SRC emacs-lisp
  ;; stop backups
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil)
#+END_SRC

*** Undo Tree
#+BEGIN_SRC emacs-lisp
    (straight-use-package 'undo-tree)
    (global-undo-tree-mode)
#+END_SRC

*** Minions
#+BEGIN_SRC emacs-lisp
    (use-package minions
      :defer 5
      :config
      (setq minions-mode-line-lighter "â‰¡")
      (minions-mode 1))
#+END_SRC

*** Tramp
#+BEGIN_SRC emacs-lisp :tangle no
      (use-package tramp
        :defer 5
        :config)
#+END_SRC

*** Editor key bindings
Most of my more specific key bindings are stored in =modal-soul.el=, a set of hydras which simulate a kind of modal-editing system ala vim. Other stuff here is just avy.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
  (straight-use-package 'avy)
  (straight-use-package 'buffer-move)
  (load "~/.emacs.d/lisp/modal-soul")

  (straight-use-package 'which-key)
  (which-key-mode)
#+END_SRC

Expand region is great.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-." . er/expand-region)))
#+END_SRC

*** mituhara emacs-app keybinds

#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'super)
#+END_SRC

*** Command Completion and Search
**** Vertico
Vertical completion prompt. I've picked this over Selectrum and Icomplete-vertical as it has better built in support than Selectrum with a smaller codebase, and a nicer cycling of results than icomplete-vertical.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init (vertico-mode))
#+END_SRC

**** Orderless
Better completion.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

**** Marginalia
This provides rich annotations to minibuffer completion results.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init (marginalia-mode))
#+END_SRC

**** Consult 
Swiper style search and grep

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)	;; orig. yank-pop
           ("<help> a" . consult-apropos)	;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake) ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)	 ;; orig. goto-line
           ("M-g M-g" . consult-goto-line) ;; orig. goto-line
           ("M-g o" . consult-outline) ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           :map isearch-mode-map
           ("M-e" . consult-isearch)   ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
           ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))
    :config
    ;; TODO: is this necessary?
    ;; (setq consult-project-root-function
    ;;       (lambda ()
    ;;         (when-let (project (project-current))
    ;;           (car (project-roots project)))))
    )
#+END_SRC
** Programs
*** waifu-mode
    Ain't this a gem. It's a kind of image viewer, it picks random images from a given folder and shows them onscreen.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'waifu)
  (waifu-keybind-to-dir
   '(("m" "~/Pictures/animu/madoka_magica/madoka")
     ("h" "~/Pictures/animu/madoka_magica/homura")
     ("s" "~/Pictures/animu/madoka_magica/sayaka")
     ("k" "~/Pictures/animu/madoka_magica/kyouko")
     ("M" "~/Pictures/animu/madoka_magica/mami")
     ("v" "~/Pictures/animu/gabriel_dropout/vigne")
     ("f" "~/Pictures/animu/re_zero/felix")
     ("p" "~/Pictures/animu/proggybooks")))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(straight-use-package 'magit)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'all-the-icons)
  (straight-use-package 'treemacs)
#+END_SRC

*** PDF Tools
Better pdf viewing
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-loader-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))
#+END_SRC

*** Elpher
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'elpher)
#+END_SRC

*** rcirc
#+BEGIN_SRC emacs-lisp
    (require 'rcirc)
    (add-hook 'rcirc-mode-hook (lambda ()
                                 (rcirc-omit-mode)
                                 (turn-on-visual-line-mode)))

  (setq rcirc-server-alist
        '(("irc.freenode.net"
           :channels ("#emacs" "#lisp" "#lispcafe" "#lobsters" "#sushigirl")
           :nick "patchy")))

  (setq rcirc-authinfo
        '(("freenode" nickserv "patchy" "walkytalky")))

  (setq rcirc-prompt "Â»Â» "
        rcirc-time-format "%H:%M "
        rcirc-fill-flag t
        rcirc-default-nick "sasha"
        rcirc-default-full-name "just another soul floating through digital space"
        rcirc-buffer-maximum-lines 1000)
#+END_SRC

* Org
As I spend so much time and effort on /org mode/ I feel it deserves a whole section and a full explanation. 

** Misc Config
First though, a few org addon packages. org-superstar replaces the default =*= with nice unicode bullets and org-sidebar provides a handy sidebar overview of files.

#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    ;; :demand
    :config
    (org-superstar-configure-like-org-bullets)
    :hook
    (org-mode . org-superstar-mode))

  (straight-use-package 'org-sidebar)
#+END_SRC

Org agenda would annoyingly mess up your windows and then not put them back. Be more like your respectable tidy brother magit.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-restore-windows-after-quit 1)
  (setq org-src-window-setup 'current-window)
#+END_SRC

=hide-emphasis-markers= is a nice addition that shows styled text inline. Combined with variable pitch mode it makes org buffers feel more like rich text.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

=org-indent-mode= handles indentation, or the lack thereof. Org files should be saved without indentation, and org-indent-mode will display them as if they were. Naturally its important for org-indent-mode to always be enabled, so that the lack of indentation is hidden away.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

=org-fragtog= nicely switches between latex preview and latex code when your cursor is over a snippet.

#+BEGIN_SRC emacs-lisp
  (use-package org-fragtog
    :config
    (setq org-preview-latex-default-process 'dvisvgm) ;; For HD latex
    (setq org-format-latex-options '(:scale 0.8))
    :hook (org-mode-hook . org-fragtog-mode))
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer "LOGBOOK")
#+END_SRC

*** Variable Pitch
Using =org-variable-pitch= we preserve whitespace spacing but use the variable pitch font for text.

#+BEGIN_SRC emacs-lisp
  (use-package org-variable-pitch
    :config (org-variable-pitch-setup)
    :hook (org-mode . org-variable-pitch-minor-mode))
#+END_SRC

** Table
Org table auto align, from =/u/ndamee= on reddit:
#+BEGIN_SRC emacs-lisp
  (require 'subr-x)

  (setq org-table-auto-align-in-progress nil)

  (defun org-table-auto-align (begin end length)
    (save-match-data
      (unless (or org-table-auto-align-in-progress
                  (not (org-at-table-p))
                  (and (eq this-command 'org-self-insert-command)
                       (member (this-command-keys) '(" " "+" "|" "-"))))
        ;; uses zero-idle timer so the buffer content is settled after
        ;; the change, the cursor is moved, so we know what state we
        ;; have to restore after auto align
        (run-with-idle-timer
         0 nil
         (lambda ()
           (if (looking-back "| *\\([^|]+\\)")
               (let ((pos (string-trim-right (match-string 1))))
                 (setq org-table-auto-align-in-progress t)
                 (unwind-protect
                     (progn
                       (org-table-align)
                       (search-forward pos nil t))
                   (setq org-table-auto-align-in-progress nil)))))))))


  (define-minor-mode org-table-auto-align-mode
    "A mode for aligning Org mode tables automatically as you type."
    :lighter " OrgTblAA"
    (if org-table-auto-align-mode
        (add-hook 'after-change-functions #'org-table-auto-align t t)
      (remove-hook 'after-change-functions #'org-table-auto-align t)))

  ;; (add-hook 'org-mode-hook #'org-table-auto-align-mode)
#+END_SRC

** Workflow
Now we get to the good stuff. Here we'll set some useful variables for all org functions. Org directory where I keep all my org files. 
My system uses time management features like the /agenda/, =org-capture=, some /GTD/ concepts, and a combo of /Orglzy/ and /Syncthing/ to provide a comprehensive, multiplatform, planning system.

#+BEGIN_SRC emacs-lisp
  (setq tk/org-directory "~/doc/org/")
  (setq tk/org-wiki-directory "~/doc/org/wiki/")
  (setq tk/org-file-list
        `(,@(file-expand-wildcards (concat tk/org-directory "*.org"))))
#+END_SRC

We should modify the /TODO/ keywords to add a 'NEXT' keyword. This means a task is ongoing, and ideally should be finished before others are started.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-todo-keywords 
        '((sequence "TODO" "WAIT" "|" "DONE" )))
#+END_SRC

=inbox.org= serves as a place for captured ideas to go. 

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat tk/org-directory "inbox.org"))
#+END_SRC

Once notes are captured to inbox.org, they must be /processed/. I will add any extra details such as deadlines, time to complete, and priority, then /refile/ them to their relevant org heading. Since all org files can be related in any weird number of ways, we shouldn't limit ourselves to only a small amount of targets. All org files (at least all in the org directory) are included, albeit only to a single heading level (for now).

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets
        (mapcar (lambda (e) `(,e . (:maxlevel . 2)))
                tk/org-file-list))
  (setq org-refile-use-outline-path 'file)
#+END_SRC

Sometimes I wanna use /pomodoro technique/.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-pomodoro)
#+END_SRC

** Agenda 
The same principle applies to /agenda/. We should be able to put /TODO/ headings in any org file, for any project, and have them be added to the agenda. We can filter through these in the agenda config.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files tk/org-file-list)
#+END_SRC

The org agenda page is the heart of the entire system. Assuming all the org files are in place, and the headings are processed correctly, this should be a beautiful dashboard to manage tasks from. Largely copied from [[https://gist.github.com/jethrokuan/78936a44f249e2c1a61b5184669a32d7][this gist]] (look up the rest of Jethro Kuans stuff on this though, he's got it down).

#+BEGIN_SRC emacs-lisp
  (setq tk/org-agenda-view
        `(("a" "Agenda"
           ;; Today
           (;; (agenda ""
            ;;         ((org-agenda-span 'day)
            ;;          (org-agenda-overriding-header "Today")
            ;;          (org-deadline-warning-days 365)))
            ;; The Week
            (agenda ""
                    ((org-agenda-span 'week)
                     (org-agenda-overriding-header "This Week")
                     (org-deadline-warning-days 5)))
            ;; Inbox
            (todo "TODO"
                  ((org-agenda-overriding-header "Inbox")
                   (org-agenda-files `(,(concat tk/org-directory "inbox.org")))))
            ;; Waiting on
            ;; (todo "WAIT"
            ;;       ((org-agenda-overriding-header "Waiting On")
            ;;        (org-agenda-files `(,@(file-expand-wildcards (concat tk/org-directory "*.org"))))))
            ;; Tasks TODO
            (todo "TODO"
                  ((org-agenda-overriding-header "Tasks")
                   (org-agenda-files `(,(concat tk/org-directory "todo.org")))
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            nil))))

  (setq org-agenda-custom-commands `,tk/org-agenda-view)
  (global-set-key (kbd "C-c a") #'org-agenda)
#+END_SRC

It's also important to handle idle time. I sometimes forget I'm clocked in, or something high priority comes up and I forget to clock out. Setting an idle time variable will tell org to prompt you after n minutes have passed without any input, asking what to do with the time spent doing 'nothing'. ~Of course some tasks aren't doable in emacs,~ glorious macOS will measure any activity on the system. Still doesn't apply for offline tasks. That could be time spent working offline, and you can just tell org to add it to the clock all the same.

#+BEGIN_SRC emacs-lisp
(setq org-clock-idle-timer 15)
#+END_SRC

We'll also do some minor theming to tidy it up.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-block-separator ?-)
#+END_SRC

Capturing is key to the process. Ideas can come about anywhere, anytime. Being able to quickly jot your idea down for later processing means you don't have to worry about sacrificing your current task or your forgetting your idea.
Right now there's only one capture template, /i/, which adds the idea to the inbox file with /TODO/ prefixed.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        `(("i" "inbox" entry (file ,(concat tk/org-directory "inbox.org")) "* TODO %?")
          ("n" "next" entry (file ,(concat tk/org-directory "next.org"))   "* TODO %?")))

  (global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC

** Note Taking
=org-download= is great for taking notes.

#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :custom
    (org-download-screenshot-method "screencapture -i %s"))
#+END_SRC

=org-roam=
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
        :after org
        :straight (:host github :repo "org-roam/org-roam" :branch "v2")
        :config
        (setq org-roam-directory (file-truename tk/org-wiki-directory))
        (setq org-roam-file-extensions '("org"))
        (org-roam-setup)
        :bind
        ("C-c n /" . org-roam-node-find)      
        ("C-c n c" . org-roam-capture)
        ("C-c n i" . org-roam-node-insert)
        ("C-c n r" . org-roam-buffer-toggle))
#+END_SRC

** Habits
Org has a nice way of tracking em.

#+BEGIN_SRC emacs-lisp
  (require 'org-install)
  (add-to-list 'org-modules 'org-habit)
#+END_SRC

** Blog
Org mode can also be used as a blog creation platform. I can write and keep blog posts locally, and then publish them to a webserver in HTML format. We publish using the =org-publish= settings in the next heading.

** Site Publishing
Pusblishing my website. Written in org files and published to HTML/Gemini. Will replace Blog.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
  (setq tk/site-publish-dir "/ssh:comf.moe:/usr/local/www/comf.moe/")
  ;;(setq tk/site-publish-dir "/ssh:beagle:/var/www/comf.moe/")
  (setq org-publish-project-alist
        `(("site-root"
           :base-directory "~/doc/site/"
           :base-extension "org"
           :section-numbers nil
           :table-of-contents nil
           :publishing-function org-html-publish-to-html
           :publishing-directory ,tk/site-publish-dir)
  
          ("site-static"
           :base-directory "~/doc/site/"
           :base-extension "css\\|html\\|js\\|jpg\\|png\\|gif"
           :recursive t
           :publishing-function org-publish-attachment
           :publishing-directory ,tk/site-publish-dir)
  
          ("site-blog"
           :base-directory "~/doc/blog/"
           :base-extension "org"
           :auto-sitemap t
           :auto-sitemap "index"
           :publishing-function org-html-publish-to-html
           :publishing-directory ,(concat tk/site-publish-dir "blog/"))
  
          ("site" :components ("site-root" "site-static" "site-blog"))))
#+END_SRC

** Finance
*** Payday Function
I get payed on the last friday of the month. ~There's no default org function for this, so I have to do it manually.~ I use =diary-float= instead.

#+BEGIN_SRC emacs-lisp :tangle no
  (defun tk/last-friday-of-month (date)
    "Return `t` if date is the last friday in the month."
    (let ((day (calendar-extract-day date)))
      (and
       (eq day 5) ; It's a friday)))
#+END_SRC

* Languages
Finally we've transformed the ancient magicks of emacs from a 50 year old dusty old expensive typewriter into an elegant tool to weave the fabric of code. Or something. Now we can get to our language specific config and hooks. 

** Company Mode
Most of these languages provide a company mode completion system. We'll just make sure the latest version is installed here so we don't have to worry about it somwhere else.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company)
#+END_SRC

** C/C++
The siblings who don't want to be associated with each other, lumped in to the same hook once again. By default emacs formats C in a bizarre GNU way. Cool, but not for me. Or whoever else has to read my C code.

The mode hook is to set up eglot, but since that's proved very difficult in OS dev stuff, and my main C programming is for OS dev, I just disabled it until I can be bothered.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
	c-basic-offset 4)

  (defun tk/c-c++-hook ()
    "Personal C/C++ hook."
    (setq company-backends
	  (cons 'company-capf
		(remove 'company-capf company-backends)))
    (eglot-ensure))

  ;(add-hook 'c-mode-hook 'tk/c-c++-hook)
#+END_SRC

*** LSP
I use LSP in non-work codebases sometimes.

#+BEGIN_SRC emacs-lisp
  (use-package eglot)
  (use-package yasnippet)
#+END_SRC

** Lisps
The language of the gods finally gets its turn. Do I want intelligent context dependent structural editing? *YES*. Do I want rainbows all over my parentheses? *YES*. Gimme that good shit.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'geiser)
  (straight-use-package 'lispy)
  (straight-use-package 'rainbow-delimiters)
  (straight-use-package 'el-fly-indent-mode)
  
  ;; TODO split this into hook declaration then multiple use-package declarations adding to hook
  (defun tk/lisp-hook ()
    "Personal Lisp hook."
    (electric-pair-mode)
    (lispy-mode)
    (rainbow-delimiters-mode)
    (show-paren-mode)
    (company-mode)
    (el-fly-indent-mode))
  
  (add-hook 'emacs-lisp-mode-hook  #'tk/lisp-hook)
  (add-hook 'common-lisp-mode-hook #'tk/lisp-hook)
  (add-hook 'scheme-mode-hook      #'tk/lisp-hook)
  (add-hook 'lisp-mode-hook        #'tk/lisp-hook)
  
  ;; Common Lisp
  (use-package sly)
  
  ;; (setq inferior-lisp-program "/opt/local/bin/sbcl")
#+END_SRC

** Latex
This is really just wrestling with macOS. AuCTeX is really good out of the box.

#+BEGIN_SRC emacs-lisp
(use-package auctex)
(straight-use-package 'latex-pretty-symbols)
(straight-use-package 'exec-path-from-shell)

(exec-path-from-shell-initialize)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.
#+END_SRC

I guess I write academic stuff. As such we need the ultimate academic tool.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'academic-phrases)
#+END_SRC
